5f04c50c91a24d3f1819371e
/////////////////////////


<% if(profileOwner){ %>
     profileOwner.name
     <%  } %>
///////////////////////////////////////////////



// const User = require('../models/user');
// const Photo = require('../models/photo');

var middlewareObj = {};

middlewareObj.isCurUserContentOwner = function (req, res, next) {
   console.log('hi');
   //    if (req.isAuthenticated()) {
   //       if (params.user._id.equals(req.user._id)) {
   //          next();
   //       } else {
   //          //res.redirect('/login'); //TODO give status???
   //          res.send('oh snap');
   //       }
   //    } else {
   //       res.send('oh snap');
   //       //res.redirect('/login');
   //    }
};

middlewareObj.isLoggedIn = function (req, res, next) {
   if (req.isAuthenticated()) {
      return next();
   } else {
      //req.flash('error', 'please login first'); TODO -- get flash to work
      res.redirect('/login');
   }
};

/* css for photo routes below */

.photoContainer {
    width: 100vw;
   margin-left: auto;
   margin-right: auto;
   height: 70vh;

   /* background-image: radial-gradient(ellipse, #535252, black); */
}
.photoImg {
   max-width: 100%;
   max-height: 80%;
   /* object-fit: contain; */
   margin-left: auto;
   margin-right: auto;

   /* margin: auto; */

   <!--TODO need to get content owner  -->
{ "_id" : ObjectId("5f1dbdf58486fd4bb8ba2e5a"), "caption" : "", "description" : "pyoiuk", "longitude" : "0", "latitude" : "72", "tags" : [ ], "author" : "j", "submittedByID" : "5f1db4ba9378581c7802c4b1", "fileName" : "userImage-1595784725707_DSC0169.jpg", "fileLocation" : "public\\uploads\\userImage-1595784725707_DSC0169.jpg", "dateSubmitted" : ISODate("2020-07-26T17:31:33.723Z"), "dateTaken" : "Tue Dec 18 2018 19:28:03 GMT-0800 (Pacific Standard Time)", "exifMetaData" : { "Make" : "NIKON CORPORATION", "Model" : "NIKON D90", "Orientation" : "Horizontal (normal)", "XResolution" : 240, "YResolution" : 240, "ResolutionUnit" : "inches", "Software" : "Adobe Photoshop Lightroom 6.0 (Windows)", "ModifyDate" : ISODate("2018-12-29T01:08:27Z"), "ExposureTime" : 0.0015625, "FNumber" : 8, "ExposureProgram" : "Manual", "ISO" : 500, "ExifVersion" : "2.3", "DateTimeOriginal" : ISODate("2018-12-19T03:28:03Z"), "CreateDate" : ISODate("2018-12-19T03:28:03Z"), "ShutterSpeedValue" : 9.321928, "ApertureValue" : 6, "ExposureCompensation" : -0.3333333333333333, "MaxApertureValue" : 1, "MeteringMode" : "Spot", "LightSource" : "Unknown", "Flash" : "Flash did not fire", "FocalLength" : 30, "SensingMethod" : "One-chip color area sensor", "FileSource" : "Digital Camera", "SceneType" : "Directly photographed", "CFAPattern" : { "0" : 2, "1" : 0, "2" : 2, "3" : 0, "4" : 1, "5" : 2, "6" : 0, "7" : 1 }, "CustomRendered" : "Normal", "ExposureMode" : "Manual", "WhiteBalance" : "Auto", "DigitalZoomRatio" : 1, "FocalLengthIn35mmFormat" : 45, "SceneCaptureType" : "Standard", "GainControl" : "Low gain up", "Contrast" : "Normal", "Saturation" : "Normal", "Sharpness" : "Normal", "SubjectDistanceRange" : "Unknown", "SerialNumber" : "3518197", "LensInfo" : [ 30, 30, 1.4, 1.4 ], "LensModel" : "30.0 mm f/1.4" }, "__v" : 0 }
{ "_id" : ObjectId("5f1ddc666be51943240ae04a"), "caption" : "secret", "description" : "", "longitude" : "0", "latitude" : "40", "tags" : [ ], "author" : "j", "submittedByID" : "5f1db4ba9378581c7802c4b1", "fileName" : "userImage-1595792527038_DSC0184.jpg", "fileLocation" : "public\\uploads\\userImage-1595792527038_DSC0184.jpg", "dateSubmitted" : ISODate("2020-07-26T19:41:26.854Z"), "dateTaken" : null, "exifMetaData" : { "Make" : "NIKON CORPORATION", "Model" : "NIKON D90", "Orientation" : "Horizontal (normal)", "XResolution" : 240, "YResolution" : 240, "ResolutionUnit" : "inches", "Software" : "Adobe Photoshop Lightroom 6.0 (Windows)", "ModifyDate" : ISODate("2019-01-03T11:28:16Z"), "ExposureTime" : 0.003125, "FNumber" : 3.5, "ExposureProgram" : "Aperture priority", "ISO" : 250, "ExifVersion" : "2.3", "DateTimeOriginal" : ISODate("2018-12-31T07:49:02Z"), "CreateDate" : ISODate("2018-12-31T07:49:02Z"), "ShutterSpeedValue" : 8.321928, "ApertureValue" : 3.61471, "ExposureCompensation" : -0.6666666666666666, "MaxApertureValue" : 3, "MeteringMode" : "Spot", "LightSource" : "Unknown", "Flash" : "Flash did not fire", "FocalLength" : 90, "SensingMethod" : "One-chip color area sensor", "FileSource" : "Digital Camera", "SceneType" : "Directly photographed", "CFAPattern" : { "0" : 2, "1" : 0, "2" : 2, "3" : 0, "4" : 1, "5" : 2, "6" : 0, "7" : 1 }, "CustomRendered" : "Normal", "ExposureMode" : "Auto", "WhiteBalance" : "Auto", "DigitalZoomRatio" : 1, "FocalLengthIn35mmFormat" : 135, "SceneCaptureType" : "Standard", "GainControl" : "None", "Contrast" : "Normal", "Saturation" : "Normal", "Sharpness" : "Normal", "SubjectDistanceRange" : "Unknown", "SerialNumber" : "3518197", "LensInfo" : [ 90, 90, 2.8, 2.8 ], "LensModel" : "90.0 mm f/2.8" }, "__v" : 0 }
{ "_id" : ObjectId("5f1e76406cad2e29e44ae37a"), "caption" : "snakes!!!", "description" : "ahhhhhh", "longitude" : "45", "latitude" : "2", "tags" : null, "author" : "j", "submittedByID" : "5f1db4ba9378581c7802c4b1", "fileName" : "userImage-1595831937538_DSC0060.jpg", "fileLocation" : "public\\uploads\\userImage-1595831937538_DSC0060.jpg", "dateSubmitted" : ISODate("2020-07-27T06:37:52.741Z"), "dateTaken" : null, "exifMetaData" : { "Make" : "NIKON CORPORATION", "Model" : "NIKON D90", "Orientation" : "Horizontal (normal)", "XResolution" : 240, "YResolution" : 240, "ResolutionUnit" : "inches", "Software" : "Adobe Photoshop Lightroom 6.0 (Windows)", "ModifyDate" : ISODate("2019-01-05T07:15:18Z"), "ExposureTime" : 0.00625, "FNumber" : 3.2, "ExposureProgram" : "Manual", "ISO" : 320, "ExifVersion" : "2.3", "DateTimeOriginal" : ISODate("2018-12-26T10:03:10Z"), "CreateDate" : ISODate("2018-12-26T10:03:10Z"), "ShutterSpeedValue" : 7.321928, "ApertureValue" : 3.356144, "ExposureCompensation" : -0.6666666666666666, "MaxApertureValue" : 3.3, "MeteringMode" : "Spot", "LightSource" : "Unknown", "Flash" : "Flash did not fire", "FocalLength" : 90, "SensingMethod" : "One-chip color area sensor", "FileSource" : "Digital Camera", "SceneType" : "Directly photographed", "CFAPattern" : { "0" : 2, "1" : 0, "2" : 2, "3" : 0, "4" : 1, "5" : 2, "6" : 0, "7" : 1 }, "CustomRendered" : "Normal", "ExposureMode" : "Manual", "WhiteBalance" : "Auto", "DigitalZoomRatio" : 1, "FocalLengthIn35mmFormat" : 135, "SceneCaptureType" : "Standard", "GainControl" : "None", "Contrast" : "Normal", "Saturation" : "Normal", "Sharpness" : "Normal", "SubjectDistanceRange" : "Unknown", "SerialNumber" : "3518197", "LensInfo" : [ 90, 90, 2.8, 2.8 ], "LensModel" : "90.0 mm f/2.8" }, "__v" : 0 }

router.get('/users', async (req, res) => {
   console.log(`query is ${JSON.stringify(req.query)}`);

   let nameOrder, dateSubOrder, date, sortOrder;
   const query = req.query;
   let andQueries = {};
   let usersToSend = {};

   /*getting sort order -- set to accending by defualt */

   // NOTE -- could sort on multiple param n a later version
   //query.sortOrder === '-1' ? (sortOrder = -1) : (sortOrder = 1);

   /* adding queries if present*/
   query.name && (andQueries = { ...{ name: query.name } });
   query.bio && (andQueries = { ...{ bio: query.bio } });

   //TODOs
   //date range submitted and posted
   //photos in radius of location
   //all searchable text -- with quotes
   //sort order -- date posted, date submitted, name, relevance, reverse order?

   let origUsersObj = await User.find({ $and: [andQueries] });
   console.log(`orig is ${JSON.stringify()}`);
   /*pulling only neccesary info from user obj*/
   origUsersObj.forEach((user, ndx) => {
      let {
         name,
         allPhotos,
         socialMediaAcnts,
         website,
         bio,
         homeLocation,
         datejoined,
      } = user;
      usersToSend = {
         ...{
            name,
            allPhotos,
            socialMediaAcnts,
            website,
            bio,
            homeLocation,
            datejoined,
         },
      };
   });

   /*adding a 'no users found' message to empty obj */
   Object.getOwnPropertyNames(usersToSend).length == 0 &&
      (usersToSend = { err: 'no users found' }); //TODO--would it be better to send an empty obj?

   res.json(usersToSend);
});


<!-- adding each photos in list -->
<% photoList.forEach((photo, ndx) =>{%>

<p>photo located at <%= photo %></p>
<img
   class="thumbnail galleryThumb"
   class="editThumbnail"
   src="\uploads\<%= photo.fileName %>"
   alt="cannot display image"
/>


<% photosFound.forEach((photo, ndx) =>{%>

<div class="photoCard">
   <img
      class="thumbnail galleryThumb"
      class="editThumbnail"
      src="\uploads\<%=photo.fileName %>"
      alt="cannot display image"
   />
   <h4 class="photoCaption">
      <%=photo.caption %>
   </h4>

   <p class="photoLocation"></p>
   <p class="photoDescription">
      <em>description : </em>
      <%=photo.description %>
   </p>
   <p class="date">submitted on<%=photo.dateSubmited %></p>
   <p class="date">taken on<%=photo.exifMetaData.DateTimeOriginal %></p>
</div>

<% }) %>


<div id="photoGallery">
   <% photosFound.forEach((photo, ndx) =>{%>

   <a href="/photos/<%= photo._id %>/photo">
      <img
         class="justifiedGalImg"
         alt="<%= photo.caption %>"
         src="<%= photo.fileName %>"
      />
   </a>

   <% })%>





{"location_2dsphere":{"$near":{"$geometry":{"type":"Point","coordinates":[5,17]},"$maxDistance":100000}}}
{"location_2dsphere":{"$near":{"$geometry":{"type":"Point","coordinates":[12,115]},"$maxDistance":3000}}}

  

  //performs a search when user enters input -- might be a better idea to have on a delay in a future version to limit
//calss to server

//holds limit for number of results to be returned

let loadMoreButton = document.getElementById('loadMore');
let userSearch = document.getElementById('userSearch');
let profileSearch = document.getElementById('profileSearch');
let userInfo = document.getElementById('userInfo');
let data = document.getElementById('variables');

// let page = data.dataset.page;
// let limit = data.dataset.limit;
loadMoreButton.style.display = 'none';

data.dataset.limit = 1; //TODO-set back to 25

userSearch.addEventListener('input', () => {
   data.dataset.searchType = 'name'; //searchs usernames only
   data.dataset.page = 0;
   //page = 0;
   userInfo.innerHTML = '';

   searchUsers();
});

profileSearch.addEventListener('input', () => {
   data.dataset.searchType = 'search'; //searches all searchable feilds
   data.dataset.page = 0;
   //page = 0;
   userInfo.innerHTML = '';

   searchUsers();
});
//calls users api to genterate list of users and add it to screen
const searchUsers = async () => {
   let searchText = '';
   if (data.dataset.searchType === 'name') {
      searchText = userSearch.value;
   } else if (data.dataset.searchType === 'search') {
      searchText = profileSearch.value;
   }

   /*setting page data to zero*/
   //this holds the current page of the results-- resets on new search

   console.log('page is ' + data.dataset.page);

   const usersRes = await fetch(
      `../api/users/?${data.dataset.searchType}=${searchText}&page=${data.dataset.page}&limit=${data.dataset.limit}`,
   );
   //    console.log(
   //       `../api/users/?name=${searchText}&page=${data.dataset.page}&limit=${data.dataset.limit}`,
   //    );

   if (usersRes.ok) {
      let userJSON = await usersRes.json(); //await needed?
      //console.log(usersRes.users);
      console.log('users: ', userJSON);
      showResultsOnPage(userJSON.users);

      //userInfo.innerHTML = await showResultsOnPage(userJSON.users);

      //tester.innerHTML = userJSON;
   } else {
      console.log('problem gettingJSON'); //TODO  -- better err handling
   }

   // return userJSON;
};

const showResultsOnPage = (users) => {
   // TODO --fully test this function
   let html = userInfo.innerHTML;
   if (users.length > 0) {
      users.forEach((user, ndx) => {
         /*limiting results to 25 users*/
         //note -- a more advanced version would allow for pagation

         //TODO -- test this with more data
         html += `<div class="card card-body">
         <h3> Name:  ${user.name}</h3>
         <h3> photoList ${user.allPhotos}</h3> <span class"photoHolder"> `;
         console.log('making html');

         if (user.allPhotos && user.allPhotos.length > 0) {
            for (i = 0; i < user.allPhotos.length && i < 3; i++) {}
         }

         html += ` </span> <h4>${ndx}</h4>
               <a href="/users/${user._id}/profile" class="btn btn-primary">View Profile</a>



               </div>`;
      });
   }

   ///////////////////////

   //    let photoRes = await fetch(
   //       `../api/photos/?id=}=${user.allPhotos[i]}`,
   //    );

   //html += await generatePhotoImage(user.allPhotos[i]);
   //console.log('html:', html);

   //    if (photoRes.ok) {
   //       console.log('photo res ok');
   //       console.log(user.allPhotos[i]);
   //       html += ` <h1>hi-${user.allPhotos[i]}<h1> `;
   //       //html += ` <img class="searchUserPhoto" src="https://pocket-syndicated-images.s3.amazonaws.com/5f480254484fa.jpg" </img> `;
   //    }
   //////////////////////////////////

   //    } else if (page == 0) {
   //       //only resets when no results to display
   //       html = '';
   //    }

   //generates button there are results
   if (users.length > 0) {
      loadMoreButton.style.display = 'block'; // = 'visible';
      //   loadMoreButtonHolder.innerHTML =
      //      '<button id="loadMore">Load more results</button>';
   } else {
      Button.style.display = 'none'; //visibility = 'hidden';
      if (html.length > 0 && html[html.length - 2] === 'v') {
         //lazy way to account for async call
         html += ' <h2 class = "noResults" >No more results to display</h2>';
      } else {
         html = ' <h2 class = "noResults" >no results found matching <h2>';
      }
      //  loadMoreButton.innerHTML = '<h1>No more results to display</h1>';
      //removes button there are no results
   }

   return html;
};

//  ${generatePhotoGallery(user.allPhotos)}

const generatePhotoGallery = async (photoList) => {
   let html = '';

   if (photoList.length > 0) {
      photoList.forEach((id, ndx) => {
         //get photo from photo api

         //create justified gal element

         //limit to first 3 photos -- have css put all photos on same line
         console.log(id);
      });
   }
};

loadMoreButton.addEventListener('click', async () => {
   data.dataset.page++;
   console.log('page incremented' + data.dataset.page); //delete
   await searchUsers();
});

const generatePhotoImage = async (photoId) => {
   let photoRes = await fetch(`../api/photos/?id=}=${photoId}`);
   let imgElement = '';

   if (photoRes.ok) {
      photoJSON = await photoRes.json();
      console.log('photo res ok');
      console.log(photoJSON);
      imgElement += ` <h1>hi-${photoId}<h1> `;
      //html += ` <img class="searchUserPhoto" src="https://pocket-syndicated-images.s3.amazonaws.com/5f480254484fa.jpg" </img> `;
   } else {
      ('<h2>No photos added</h2>');
   }

   return imgElement;
};
